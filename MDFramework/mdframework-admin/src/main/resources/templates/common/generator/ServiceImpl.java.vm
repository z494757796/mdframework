package ${package}.service.impl;

import ${package}.bean.api.HttpResponse;
import ${package}.common.enums.HttpResponseEnum;
import com.github.pagehelper.PageHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ${package}.bean.api.HttpResponse;
import com.github.pagehelper.PageInfo;

import java.util.List;
import java.util.Map;
import java.util.HashMap;

import ${package}.dao.${className}Dao;
import ${package}.bean.entity.${className}DO;
import ${package}.service.${className}Service;
import org.springframework.transaction.annotation.Transactional;



@Service
public class ${className}ServiceImpl implements ${className}Service {
	@Autowired
	private ${className}Dao ${classname}Dao;
	
	@Override
	public ${className}DO get(${pk.attrType} ${pk.attrname}){
		return ${classname}Dao.get(${pk.attrname});
	}
	
	@Override
	public PageInfo<List<${className}DO>> list(Map<String, Object> map){
	    if (null == map)
            map = new HashMap<>();
	    Integer offset = (Integer)map.get("offset");
        Integer limit = (Integer)map.get("limit");
        if(offset != null && limit != null){
            PageHelper.offsetPage(offset,limit);
        }
        List<${className}DO> list = ${classname}Dao.list(map);
		return new PageInfo(list);
	}
	
	@Override
	public int count(Map<String, Object> map){
		return ${classname}Dao.count(map);
	}
	
	@Override
	@Transactional(rollbackFor = Exception.class)
	public int save(${className}DO ${classname}){
		return ${classname}Dao.save(${classname});
	}
	
	@Override
    @Transactional(rollbackFor = Exception.class)
	public int update(${className}DO ${classname}){
		return ${classname}Dao.update(${classname});
	}
	
	@Override
	public int remove(${pk.attrType} ${pk.attrname}){
		return ${classname}Dao.remove(${pk.attrname});
	}
	
	@Override
	@Transactional(rollbackFor = Exception.class)
	public int batchRemove(${pk.attrType}[] ${pk.attrname}s){
		return ${classname}Dao.batchRemove(${pk.attrname}s);
	}

    @Override
    @Transactional(rollbackFor = Exception.class)
    public HttpResponse<PageInfo> listByWhere(Integer pageNum, Integer pageSize){
        if(pageNum != null && pageSize != null){
            PageHelper.startPage(pageNum,pageSize);
        }
        List<${className}DO> list = ${classname}Dao.list(new HashMap<String,Object>(){{

        }});
        if(list.size() > 0){
            return HttpResponse.createBySuccess(new PageInfo(list));
        }
        return HttpResponse.createByErrorResponseEnum(HttpResponseEnum.NO_RECORDS);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public HttpResponse save${className}(${className}DO ${classname}){
        int result = ${classname}Dao.save(${classname});
        if(result == 0){
            return HttpResponse.createByErrorMessage("保存失败");
        }
        return HttpResponse.createBySuccess("保存成功");
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public HttpResponse update${className}(${className}DO ${classname}){
        int result = ${classname}Dao.update(${classname});
        if(result == 0){
            return HttpResponse.createByErrorMessage("更新失败");
        }
        return HttpResponse.createBySuccess("更新成功");
    }

    @Override
    public HttpResponse<${className}DO> get${className}(${pk.attrType} ${pk.attrname}){
        ${className}DO ${classname} = ${classname}Dao.get(${pk.attrname});
        if(${classname} != null){
            return HttpResponse.createBySuccess(${classname});
        }
        return HttpResponse.createByErrorResponseEnum(HttpResponseEnum.NO_RECORDS);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public HttpResponse delete${className}(${pk.attrType} ${pk.attrname}){
        int result = ${classname}Dao.remove(${pk.attrname});
        if(result == 0){
            return HttpResponse.createByErrorMessage("删除失败");
        }
        return HttpResponse.createBySuccess("删除成功");
    }
	
}
